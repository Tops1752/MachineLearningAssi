qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=jobclass,data=training)+geom_smooth(method="lm",formular=y~x)
qplot(age,wage,colour=education,data=training)+geom_smooth(method="lm",formular=y~x)
cutWage <- cut2(training$wage,g=3)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
p1
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
table(cutWage,training$jobclass)
class(cutWage)
levels(cutWage)
qplot(wage,colour=education,data=training,geom="density")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=.75,list=FALSE)
training <- spam[inTrain,]
testing  <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
inTrain <- createDataPartition(y=spam$type,p=.7,list=FALSE)
training <- spam[inTrain,]
testing  <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
testCapAve <- testing$capitalAve
testCapAve <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
trainCapAve<- training$capitalAve
trainCapAve <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
testCapAve <- testing$capitalAve
testCapAve <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAve);sd(trainCapAve)
mean(testCapAve);sd(testCapAve)
testCapAve <- testing$capitalAve
testCapAve <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAve);sd(testCapAve)
trainCapAve<- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS);sd(trainCapAveS)
mean(testCapAveS);sd(testCapAveS)
preObj <- preProcess (training[,58],method=c("center","scale"))
preObj <- preProcess (training[,-58],method=c("center","scale"))
trainCapAvs<- predict(preObj,training[,-58])$capitalAve
mean(trainCapAvs);sd(trainCapAvs)
testCapAves <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAves);sd(testCapAves)
set.seed(32343)
modelFit <- train(type~.,data=training,method="glm",preProcess = c("center","scale"))
install.packages("e1071", dep = TRUE)
modelFit <- train(type~.,data=training,method="glm",preProcess = c("center","scale"))
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1],size=1,prob=0.05)==1
training$capAve[selectNA]<-NA
preObj <- prePorcess(training[,-58],method="knnImpute")
preObj <- preProcess(training[,-58],method="knnImpute")
capAve <- predict(preObj,training[-58])$capAve
install.packages("RANN")
library("RANN")
capAve <- predict(preObj,training[-58])$capAve
View(spam)
library(kernlab)
data(spam)
spam$capitalAveSq <- spam$capitalAve^2
library(ISLR)
library(caret)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=.7,list=FALSE)
training <- Wage[inTrain,]
testing  <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage~jobclass,data=training)
dummies <- dummyVars(wage~jobclass,data=training)
head(predict(dummies,newdata=training))
nsv <- nearZeroVar(training,saveMetrics=TRUE)
nsv
library(splines)
bsBasis<-bs(training$age,df=3)
bsBasis
lm1<- lm(wage~bsBasis,data=training)
plot(training$age,traing$wage,pch=`9,cex=0.5)
plot(training$age,traing$wage,pch=19,cex=0.5)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=.7,list=FALSE)
training <- spam[inTrain,]
testing  <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <-0
which(M>0.8,arr.ind=T)
M
which(M>0.8,arr.ind=T)
names(spam)[c(32,34)]
plot(spam[,34],spam[,32])
X<-0.71*training$num415 + 0.17 * training$num857
Y<-0.71*training$num415 - 0.17 * training$num857
plot(x,y)
plot(X,Y)
X<-0.71*training$num415 + 0.71 * training$num857
Y<-0.71*training$num415 - 0.71 * training$num857
plot(X,Y)
smallSpam <- spam[,c(34,32)]
proComp <- procomp(smallSpam)
proComp <- prcomp(smallSpam)
prComp <- prcomp(smallSpam)
plot(prComp$x,[,1],prComp$x[,2])
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
sampPC <- predict(prePorc,log10(spam[,58]+1))
sampPC <- predict(preProc,log10(spam[,58]+1))
sampPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete,2)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
summary(training$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training,2)
name(training,2)
names(training)
ILs <- grep('IL',names(training),value=TRUE)
ILs
?grep
ILs <- grep("IL.",names(training),value=TRUE,fixed = TRUE)
ILs
ILs <- grep("IL",names(training),value=TRUE,fixed = TRUE)
ILs
ILs <- grep("^IL",names(training),value=TRUE)
ILs
preProc <- preProcess(log10(training[ILs]),method="pca",pcaComp=2)
summary(training$Superplasticizer)
preProc <- preProcess(training[ILs],method="pca",pcaComp=2)
preProc <- preProcess(training[ILs],method="pca",thresh=0.9,coutcome=training$diagnosis)
preProc$rotation
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILs <- grep("^IL",names(training),value=TRUE)
preProc1 <- preProcess(training[ILs],method="pca",thresh=0.8,coutcome=training$diagnosis)
preProc1 <- preProcess(training[ILs],method="pca",thresh=0.8,coutcome=training$diagnosis)
preProc2 <- train(training[ILs]$diagnosis,method="glm",data=training[ILs])
training2<- training[ILs]
training2$diagnosis <- training$diagnosis
preProc2 <- train(training2$diagnosis~.,method="glm",data=training2)
modelFit2 <- train(training2$diagnosis~.,method="glm",data=training2)
c2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing))
c2$Accuracy
df <- data.frame(diagnosis,adData[,ILs])
training <- df[inTrain]
training <- df[inTrain,]
testing <- df[-inTrain,]
modelFit1 <- train(diagnosis~.,method = "glm",preProcess = "pca",data=training,trControl = trainControl=list9thresh=0.8)
modelFit1 <- train(training$diagnosis~.,
method = "glm",
preProcess = "pca",
data=training,
trControl = trainControl=list(thresh=0.8))
modelFit1 <- train(training$diagnosis~.,
method = "glm",
preProcess = "pca",
data=training,
trControl = trainControl(list(thresh=0.8)))
names(training)
modelFit1 <- train(training$diagnosis~.,
method = "glm",
preProcess = "pca",
data=training,
trControl = trainControl(preProcOptions = list(thresh=0.8)))
modelFit2 <- train(diagnosis~.,method="glm",data=training)
c1 <- confusionMatrix(predict(modelFit1,testing),testing$diagnosis)
c2 <- confusionMatrix(predict(modelFit2,testing),testing$diagnosis)
C1
c1
c2
open ~/.Rprofile
options(rpubs.upload.method = "internal")
?Startup
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile") )
Filter(file.exists, candidates)
setwd("C:/Users/bzou/Documents/R/Practical Machine Learning/MachineLearningAssi")
if(!file.exists("./data"))
dir.create(file.path("./data"))
download.file(url,"./data/pml-training.csv",method="wininet")
download.file(url,"./data/pml-training.csv")
download.file(url,destfile="./data/pml-training.csv")
clear(list=ls())
rm(list=ls())
if(!file.exists("./data"))
dir.create(file.path("./data"))
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
class(url)
download.file(url,destfile="./data/pml-training.csv")
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url,destfile="./data/pml-testing.csv")
training <- read.csv("./data/pml-training.csv")
testing  <- read.csv("./data/pml-testing.csv")
View(testing)
View(training)
names(training)
head(training$classe)
head(testing$classe)
trainingDF <- read.csv("./data/pml-training.csv")
testingDF  <- read.csv("./data/pml-testing.csv")
rm(c("training,testing"))
rm(testing)
rm(training)
library(caret)
library(caret)
inTrain <- createDataPartition(y=spam$type,p=.7,list=FALSE)
inTrain <- createDataPartition(y=trainingDF$classe,p=.7,list=FALSE)
training <- trainingDF[inTrain,]
testing  <- trainingDF[-inTrain,]
dim(training);testing(testing)
dim(training);dim(testing)
summary(training)
View(testingDF)
data(iris)
names(iris)
library(ggplot2)
library(rattle)
install.packages("rattle")
View(training)
varLog <- sapply(training,function(x){if(sum(is.na(x)>length(x)*0.8) | length(x=="")>length(x)) TRUE; else FALSE})
varLog <- sapply(training,function(x){if(sum(is.na(x)>length(x)*0.8) | length(x=="")>length(x)) TRUE else FALSE})
length(varLog)
varLog
length(varLog==TRUE)
length(varLog==FALSE)
sum(is.na(training$max_roll_belt    ))
length(training$max_roll_belt    )
x<-training$max_roll_belt
if(sum(is.na(x)>length(x)*0.8) | length(x=="")>length(x)) TRUE else FALSE
(sum(is.na(x)>length(x)*0.8)
)
varLog <- sapply(training,function(x){ifelse (sum(is.na(x)>length(x)*0.8) | length(x=="")>length(x)) TRUE, FALSE})
varLog <- sapply(training,function(x){ifelse (sum(is.na(x)>length(x)*0.8) || length(x=="")>length(x) TRUE, FALSE)})
varLog <- sapply(training,function(x){ifelse (sum(is.na(x)>length(x)*0.8) || length(x=="")>length(x), TRUE, FALSE)})
varLog
ifelse (sum(is.na(x)>length(x)*0.8) || length(x=="")>length(x), TRUE, FALSE)
ifelse (sum(is.na(x))>length(x)*0.8 || length(x=="")>length(x), TRUE, FALSE)
varLog <- sapply(training,function(x){ifelse (sum(is.na(x))>length(x)*0.8 || length(x=="")>length(x), TRUE, FALSE)})
varLog
names(training(varLog))
var <- data.frame(names<-names(training),logic <- varLog)
View(var)
rm(x)
var <- var[var$logic==FALSE,]$names
plotTraining <- training[,var]
pairs(plotTraining)
rm(names)
modelFit <- train(training$classe ~ .,method="rpart",preProcess="pca",data=training)
modelFit <- train(training$classe ~ .,method="rpart",preProcess="pca",data=training[,var])
modelFit <- train(training$classe ~ .,method="rpart",preProcess="pca",data=training[,var],na.action=na.pass)
nsv <- nearZeroVar(training,saveMetrics=TRUE)
View(nsv)
M <- abs(cor(training[,-160]))
View(nsv)
dat <- read.csv("C:/Users/bzou/Desktop/Project/Scholastic/Data Analysis/Jeanie Request Data Analysis/Detail.csv")
View(dat)
ContByStopByYear <- aggregate(LPCnt~ParcelStops+timCalYear,data=dat,sum)
library(ggplot2)
View(ContByStopByYear)
View(ContByStopByYear)
p1 <- ggplot(ContByStopByYear,aes(x=ParcelStops,y=LPCnt,group=timCalYear))+
geom_line(colour=timCalYear)
p1 <- ggplot(ContByStopByYear,aes(x=ParcelStops,y=LPCnt,group=timCalYear))+
geom_line(aes(colour=timCalYear))
p1
class(ContByStopByYear$timCalYear)
p1 <- ggplot(ContByStopByYear,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))
p1
ContByYear <- aggregate(LPCnt~timCalYear,data=dat,sum)
QtyByYear <- aggregate(TotalQty~timCalYear,data=dat,sum)
GeneralByYear <- merge(ContByYear,QtyByYear,by="timCalYear",all = TRUE)
View(GeneralByYear)
library(grid)
library(gridExtra)
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity")
generalPlot1
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity"aes(fill=LPCnt))
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))
generalPlot1
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")+
scale_x_discrete(levels(as.factor(timCalYear)))
# Compare number of conts finished by stops by year
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")+
scale_x_discrete(levels(as.factor(GeneralByYear$timCalYear)))
generalPlot1
levels(as.factor(GeneralByYear$timCalYear))
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")+
scale_x_discrete(as.factor(GeneralByYear$timCalYear))
generalPlot1
generalPlot1 <- ggplot(GeneralByYear,aes(x=timCalYear,y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
generalPlot1
generalPlot1 <- ggplot(GeneralByYear,aes(x=as.factor(timCalYear),y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
generalPlot1
generalPlot1 <- ggplot(GeneralByYear,aes(x=as.factor(timCalYear),y=LPCnt))+
geom_bar(stat="identity",aes(fill=LPCnt))+
ggtitle("Total Number of Shipping Containers by Year")
generalPlot1
generalPlot2 <- ggplot(GeneralByYear,aes(x=as.factor(timCalYear),y=TotalQty))+
geom_bar(stat="identity",aes(fill=TotalQty))+
ggtitle("Total Number of Units by Year")
generalPlot2
grid.arrange(generalPlot1,generalPlot2,ncol = 2,main = "Total Shipping Containers/Units by Year")
p1
p2 <- ggplot(ContByStopByYear[ContByStopByYear$ParcelStops<11,],aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))
p2
StopsByYear1 <- ggplot(ContByStopByYear,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))+
ggtitle("Containers Finished by Stops by Year")
StopsByYear2 <- ggplot(ContByStopByYear[ContByStopByYear$ParcelStops<11,],aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))+
ggtitle("Details for Containers Finished in 10 Stops")
grid.arrange(StopsByYear1,StopsByYear2,ncol = 2,main = "Total Shipping Containers Finished by Stops by Year")
StopsByYear1 <- ggplot(ContByStopByYear,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))+
ggtitle("Containers Finished by Stops by Year")
StopsByYear2 <- ggplot(ContByStopByYear[ContByStopByYear$ParcelStops<11,],aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalYear)))+
geom_line(aes(colour=as.factor(timCalYear)))+
ggtitle("Details for Containers Finished in 10 Stops",size=2)
grid.arrange(StopsByYear1,StopsByYear2,ncol = 2,main = "Total Shipping Containers Finished by Stops by Year")
dat2014 <- dat[dat$timCalYear==2014,]
ContByStopByMonth <- aggregate(LPCnt~ParcelStops+timCalMonth,data=dat,sum)
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)))+
ggtitle("Containers Finished by Stops by Month - 2014")
StopsByMonth1
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=2)+
ggtitle("Containers Finished by Stops by Month - 2014")
StopsByMonth1
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month - 2014")
StopsByMonth1
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month - 2014")+
scale_x_continuous(break=1)
seq(1:35,1)
?seq
seq(1,35,1)
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=ParcelStops,y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month - 2014")+
scale_x_continuous(seq(1,35,1))
StopsByMonth1
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month - 2014")
StopsByMonth1
grid.arrange(StopsByYear1,StopsByYear2,ncol = 1,main = "Total Shipping Containers Finished by Stops by Year")
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month")
topsByMonth2 <- ggplot(ContByStopByMonth[ContByStopByMonth$ParcelStops<11],aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Details for Containers Finished in 10 Stops")
grid.arrange(StopsByMonth1,topsByMonth2,ncol = 1,main = "Total Shipping Containers Finished by Stops by Month - 2014")
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month")
StopsByMonth2 <- ggplot(ContByStopByMonth[ContByStopByMonth$ParcelStops<11],aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Details for Containers Finished in 10 Stops")
StopsByMonth2 <- ggplot(ContByStopByMonth[ContByStopByMonth$ParcelStops<11,],aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Details for Containers Finished in 10 Stops")
grid.arrange(StopsByMonth1,StopsByMonth2,ncol = 1,main = "Total Shipping Containers Finished by Stops by Month - 2014")
ContByStopByMonth <- aggregate(LPCnt~ParcelStops+timCalMonth,data=dat2014,sum)
StopsByMonth1 <- ggplot(ContByStopByMonth,aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Containers Finished by Stops by Month")
StopsByMonth2 <- ggplot(ContByStopByMonth[ContByStopByMonth$ParcelStops<11,],aes(x=as.factor(ParcelStops),y=LPCnt,group=as.factor(timCalMonth)))+
geom_line(aes(colour=as.factor(timCalMonth)),size=1)+
ggtitle("Details for Containers Finished in 10 Stops")
grid.arrange(StopsByMonth1,StopsByMonth2,ncol = 1,main = "Total Shipping Containers Finished by Stops by Month - 2014")
ContByStopByYear$per <- ContByStopByYear$LPCnt/GeneralByYear[which(GeneralByYear$timCalYear==ContByStopByYear$timCalYear),]$LPCnt
View(ContByStopByYear)
ContByStopByYear <- merge(ContByStopByYear,GeneralByYear,by="timCalYear",all=TRUE)
View(ContByStopByYear)
ContByStopByYear$per<-ContByStopByYear$LPCnt.x/ContByStopByYear$LPCnt.y
View(ContByStopByYear)
?freq
aggregate(per~timCalYear,ContByStopByYear[ContByStopByYear$ParcelStops<6,],sum)
table <- merge(aggregate(per~timCalYear,ContByStopByYear[ContByStopByYear$ParcelStops<6,],sum),
aggregate(per~timCalYear,ContByStopByYear[ContByStopByYear$ParcelStops<11,],sum),
by="timCalYear",all=TRUE
)
table
table <- data.frame(timCalYear=table$timCalYear,PerW5Stop=round(table$per.x,2),PerW10Stop=round(table$per.y,2))
table
dat2014$InductStopsT <- dat2014$InductStops * dat2014$LPCnt
dat2014$InductStopsT <- dat2014$InductStops * dat2014$LPCnt
dat2014$IndLineStopsT <- dat2014$IndLineStops * dat2014$LPCnt
dat2014$Line4StopsT <- dat2014$Line4Stops * dat2014$LPCnt
dat2014$QuickStopsT <- dat2014$QuickStops * dat2014$LPCnt
dat2014$QuickStopsT <- dat2014$QuickStops * dat2014$LPCnt
dat2014$MezzStopsT <- dat2014$MezzStops * dat2014$LPCnt
PickZoneStop <- merge(aggregate(InductStopsT~ParcelStops,dat2014,sum),
aggregate(IndLineStopsT~ParcelStops,dat2014,sum),
aggregate(Line4StopsT~ParcelStops,dat2014,sum),
aggregate(QuickStopsT~ParcelStops,dat2014,sum),
aggregate(QuickStopsT~ParcelStops,dat2014,sum),
aggregate(MezzStopsT~ParcelStops,dat2014,sum),
by="timCalMonth", all=TRUE
)
PickZoneStop <- merge(aggregate(InductStopsT~ParcelStops,dat2014,sum),
aggregate(IndLineStopsT~ParcelStops,dat2014,sum),
aggregate(Line4StopsT~ParcelStops,dat2014,sum),
aggregate(QuickStopsT~ParcelStops,dat2014,sum),
aggregate(QuickStopsT~ParcelStops,dat2014,sum),
aggregate(MezzStopsT~ParcelStops,dat2014,sum),
by="ParcelStops", all=TRUE
)
aggregate(MezzStopsT~ParcelStops,dat2014,sum)
?merge
PickZoneStop <- merge(aggregate(InductStopsT~ParcelStops,dat2014,sum),
aggregate(IndLineStopsT~ParcelStops,dat2014,sum),
by="ParcelStops", all=TRUE
)
PickZoneStop <- merge(PickZoneStop,aggregate(Line4StopsT~ParcelStops,dat2014,sum),by="ParcelStops", all=TRUE)
PickZoneStop <- merge(aggregate(InductStopsT~ParcelStops,dat2014,sum),
aggregate(IndLineStopsT~ParcelStops,dat2014,sum),
by="ParcelStops", all=TRUE
)
PickZoneStop <- merge(PickZoneStop,aggregate(Line4StopsT~ParcelStops,dat2014,sum),by="ParcelStops", all=TRUE)
PickZoneStop <- merge(PickZoneStop,aggregate(QuickStopsT~ParcelStops,dat2014,sum),by="ParcelStops", all=TRUE)
PickZoneStop <- merge(PickZoneStop,aggregate(MezzStopsT~ParcelStops,dat2014,sum),by="ParcelStops", all=TRUE)
View(PickZoneStop)
View(PickZoneStop)
d <- read.delim(textConnection(PickZoneStop),sep="")
library(reshape2)
d <- melt(PickZoneStop,id.vars = "ParcelStops")
View(d)
PickZoneStop <- melt(PickZoneStop,id.vars = "ParcelStops")
View(PickZoneStop)
PickZonePlot <- ggplot(PickZoneStop,aes(x=as.factor(ParcelStops),y=value,group=variable))+
geom_bar(stat="identity",aes(fill=variable)) + coord_flip()
PickZonePlot
PickZonePlot <- ggplot(PickZoneStop,aes(x=as.factor(ParcelStops),y=value,group=variable))+
geom_bar(stat="identity",aes(fill=variable)) + coord_flip()+
labs(title="Number of Containers Stops by Pick Zones - 2014",x="Number of Containers", y="Total Stops")
PickZonePlot
PickZonePlot <- ggplot(PickZoneStop,aes(x=as.factor(ParcelStops),y=value,group=variable))+
geom_bar(stat="identity",aes(fill=variable)) + coord_flip()+
labs(title="Number of Containers Stops by Pick Zones - 2014",y="Number of Containers", x="Total Stops")
PickZonePlot
